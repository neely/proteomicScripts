"""
Script: output-mgfmzid-stats.py

Description:
This script analyzes an input CSV file containing mass spectrometry scan data to compute
various statistics related to precursor and MS2 intensities. It determines the total number
of scans, the count and percentage of identified scans, and the total and identified
intensities for both precursor and MS2 ions. The output is formatted as a tab-delimited
text file. This script is designed to process any CSV file that contains the necessary
'intensity', 'summed_ms2_intensity', and 'pass_threshold' columns, but specifically the output
generated by the `process_mgf_mzid.py` script.

Input Files:
1.  <input_csv>: The CSV file containing the MS2 scan data.
    This file **must** include the following columns:
    - 'intensity': For precursor intensity.
    - 'summed_ms2_intensity': For the sum of MS2 ion intensities.
    - 'pass_threshold': Indicating identification status (e.g., 'yes' or 'no').

Command-Line Usage:
Run the script from your terminal using the following format:

    python output-mgfmzid-stats.py <input_csv> <output_txt>

Arguments:
- <input_csv>: Path to the input CSV file.
- <output_txt>: Desired name/path for the resulting output text file.

Output File (<output_txt>):
The generated text file will contain tab-delimited statistics, including:
- Total number of MS2 scans.
- Number and percentage of identified MS2 scans.
- Total precursor intensity.
- Total MS2 intensity.
- Identified precursor intensity.
- Identified MS2 intensity.
- Percentage of total precursor intensity that is identified.
- Percentage of total MS2 intensity that is identified.

Author: B. Neely; 30 Jan 2025
"""

import csv
import sys

if len(sys.argv) != 3:
    print("Usage: python output-mgfmzid-stats.py <input_csv> <output_txt>")
    sys.exit(1)

input_file = sys.argv[1]
output_file = sys.argv[2]

total_ms2_scans = 0
identified_ms2_scans = 0
total_precursor_intensity = 0.0
total_ms2_intensity = 0.0
identified_precursor_intensity = 0.0
identified_ms2_intensity = 0.0

with open(input_file, 'r') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        total_ms2_scans += 1
        intensity = float(row['intensity'])
        ms2_intensity = float(row['summed_ms2_intensity'])
        total_precursor_intensity += intensity
        total_ms2_intensity += ms2_intensity

        if row['pass_threshold'].strip().lower() == 'yes':
            identified_ms2_scans += 1
            identified_precursor_intensity += intensity
            identified_ms2_intensity += ms2_intensity

percentage_identified = (identified_ms2_scans / total_ms2_scans) * 100 if total_ms2_scans > 0 else 0
percentage_identified_precursor_intensity = (identified_precursor_intensity / total_precursor_intensity) * 100 if total_precursor_intensity > 0 else 0
percentage_identified_ms2_intensity = (identified_ms2_intensity / total_ms2_intensity) * 100 if total_ms2_intensity > 0 else 0

with open(output_file, 'w') as f:
    f.write(f"Total MS2 scans:\t{total_ms2_scans}\n")
    f.write(f"Number of identified MS2 scans:\t{identified_ms2_scans}\n")
    f.write(f"Percentage of identified MS2 scans:\t{percentage_identified:.2f}\n")
    f.write(f"Total precursor intensity:\t{total_precursor_intensity:.2f}\n")
    f.write(f"Total MS2 intensity:\t{total_ms2_intensity:.2f}\n")
    f.write(f"Identified precursor intensity:\t{identified_precursor_intensity:.2f}\n")
    f.write(f"Identified MS2 intensity:\t{identified_ms2_intensity:.2f}\n")
    f.write(f"Percentage of total precursor intensity that is identified:\t{percentage_identified_precursor_intensity:.2f}\n")
    f.write(f"Percentage of total MS2 intensity that is identified:\t{percentage_identified_ms2_intensity:.2f}\n")

print(f"Statistics written to {output_file}")
